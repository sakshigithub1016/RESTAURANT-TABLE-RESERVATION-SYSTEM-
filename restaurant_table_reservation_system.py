# -*- coding: utf-8 -*-
"""restaurant_table_reservation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dyOOQmT8IJMBJGEUBcJL_mSpaBGPT3m2
"""

import tkinter as tk

# Define the size of the restaurant's seating arrangement (matrix)
num_rows = 5
num_cols = 3
restaurant = [['Empty' for _ in range(num_cols)] for _ in range(num_rows)]

# Define the cost for booking a table
table_cost = 50 # You can adjust this cost as needed

# Function to book a table
def book_table():
    customer_name = customer_name_entry.get()
    row = int(row_entry.get())
    col = int(col_entry.get())
    if row < 0 or row >= num_rows or col < 0 or col >= num_cols:
        result_label.config(text="Invalid table selection. Please choose a valid table.", fg="red")
    elif restaurant[row][col] == 'Empty':
        restaurant[row][col] = customer_name
        update_table_status()
        result_label.config(text=f"Table ({row}, {col}) has been booked for {customer_name}. Cost: ${table_cost}", fg="green")
    else:
        result_label.config(text=f"Table ({row}, {col}) is already occupied.", fg="red")

# Function to clear a table
def clear_table():
    row = int(row_entry.get())
    col = int(col_entry.get())
    if row < 0 or row >= num_rows or col < 0 or col >= num_cols:
        result_label.config(text="Invalid table selection. Please choose a valid table.", fg="red")
    elif restaurant[row][col] != 'Empty':
        customer_name = restaurant[row][col]
        restaurant[row][col] = 'Empty'
        update_table_status()
        result_label.config(text=f"Table ({row}, {col}) has been cleared for {customer_name}.", fg="green")
    else:
        result_label.config(text=f"Table ({row}, {col}) is already empty.", fg="red")

# Function to update the table status on the GUI
def update_table_status():
    for row in range(num_rows):
        for col in range(num_cols):
            table_label = table_labels[row][col]
            table_status = restaurant[row][col]
            table_label.config(text=f"Table {row}-{col}\n{table_status}", bg="lightblue" if table_status == "Empty" else "lightcoral")

# Create the main window
root = tk.Tk()
root.title("Restaurant Table Reservation System")

# Create labels and entry fields
customer_name_label = tk.Label(root, text="Enter Customer Name:", fg="blue")
customer_name_label.grid(row=0, column=0)
customer_name_entry = tk.Entry(root)
customer_name_entry.grid(row=0, column=1)

row_label = tk.Label(root, text="Enter Row (0-4):", fg="blue")
row_label.grid(row=1, column=0)
row_entry = tk.Entry(root)
row_entry.grid(row=1, column=1)

col_label = tk.Label(root, text="Enter Column (0-2):", fg="blue")
col_label.grid(row=2, column=0)
col_entry = tk.Entry(root)
col_entry.grid(row=2, column=1)

book_button = tk.Button(root, text="Book Table", command=book_table, bg="blue", fg="white")
book_button.grid(row=3, column=0)
clear_button = tk.Button(root, text="Clear Table", command=clear_table, bg="red", fg="white")
clear_button.grid(row=3, column=1)

result_label = tk.Label(root, text="", fg="green")
result_label.grid(row=4, columnspan=2)

# Create a grid of labels to represent tables
table_labels = []
for row in range(num_rows):
    table_row = []
    for col in range(num_cols):
        table_label = tk.Label(root, text=f"Table {row}-{col}\n{restaurant[row][col]}", padx=10, pady=10, relief="ridge", bg="lightgreen")
        table_label.grid(row=row + 5, column=col)
        table_row.append(table_label)
    table_labels.append(table_row)

# Start the GUI main loop
root.mainloop()